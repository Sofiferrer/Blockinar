{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sofi\\\\Desktop\\\\Blockinar\\\\blockinar\\\\src\\\\screens\\\\Home\\\\components\\\\Infected\\\\components\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { Table, Button } from 'react-bootstrap';\nimport { useTable } from 'react-table';\nimport { infected } from \"../../../../../api/infected\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfoTable = () => {\n  _s();\n\n  const [infectedPeople, setInfectedPeople] = useState();\n  useEffect(() => {\n    infected.getInfected().then(response => {\n      setInfectedPeople(response);\n    });\n  }, []);\n  console.log(infectedPeople);\n  const totalInfected = infectedPeople && infectedPeople.length;\n\n  const getDate = miliseconds => {\n    const completeDate = new Date(miliseconds * 1000);\n    const year = completeDate.getFullYear();\n    const month = completeDate.getMonth() + 1;\n    const day = completeDate.getDate();\n    const date = `${day} / ${month} / ${year}`;\n    return date;\n  };\n\n  const newDate = new Date();\n  const year = newDate.getFullYear();\n  const month = newDate.getMonth() + 1;\n  const day = newDate.getDate();\n  const today = `${day} / ${month} / ${year}`; // const loadTable = (list) => {\n  //     return (list && list.map((infected) => (\n  //         <tr key={infected.id} style={{ backgroundColor: `${infected.live ? \"white\" : \"rgba(255, 99, 132, 0.4)\"}` }}>\n  //             <td>{getDate(`${infected.infect_date}`)}</td>\n  //             <td>{infected.first_name}</td>\n  //             <td>{infected.last_name}</td>\n  //             <td>{infected.age}</td>\n  //             <td>{infected.country}</td>\n  //             <td>{infected.female ? \"Femenino\" : \"Masculino\"}</td>\n  //         </tr>\n  //     )))\n  // }\n  // const ordenar = () => {\n  //     infectedPeople.sort(function (a, b) {\n  //         return a.age - b.age;\n  //     });\n  //     console.log(infectedPeople)\n  //     const table = document.getElementById('dataTable');\n  //     const tbody = table.getElementsByTagName('tbody')[0];\n  //     tbody.innerHTML = '';\n  //     loadTable(infectedPeople);\n  // }\n  // console.log(infectedPeople)\n\n  const COLUMNS = [{\n    Header: 'Fecha contagio',\n    accessor: 'infect_date'\n  }, {\n    Header: 'Nombre',\n    accessor: 'first_name'\n  }, {\n    Header: 'Apellido',\n    accessor: 'last_name'\n  }, {\n    Header: 'Edad',\n    accessor: 'age'\n  }, {\n    Header: 'Pais',\n    accessor: 'country'\n  }, {\n    Header: 'Genero',\n    accessor: 'female'\n  }];\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => infectedPeople, [infectedPeople]);\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        backgroundColor: 'rgb(87, 234, 154)',\n        textAlign: 'center',\n        marginBottom: '5vh'\n      },\n      children: [\"Cantidad de infectados al dia \", today, \": \", totalInfected]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '80%',\n        margin: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: rows.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 56\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfoTable, \"/3raQzHyS05sWCCwXA0uca6nPUA=\", false, function () {\n  return [useTable];\n});\n\n_c = InfoTable;\nexport { InfoTable };\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoTable\");","map":{"version":3,"sources":["C:/Users/Sofi/Desktop/Blockinar/blockinar/src/screens/Home/components/Infected/components/Table.js"],"names":["React","useEffect","useState","useMemo","Table","Button","useTable","infected","InfoTable","infectedPeople","setInfectedPeople","getInfected","then","response","console","log","totalInfected","length","getDate","miliseconds","completeDate","Date","year","getFullYear","month","getMonth","day","date","newDate","today","COLUMNS","Header","accessor","columns","data","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","backgroundColor","textAlign","marginBottom","width","margin","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useTable } from 'react-table'\r\nimport { infected } from \"../../../../../api/infected\";\r\n\r\nconst InfoTable = () => {\r\n\r\n    const [infectedPeople, setInfectedPeople] = useState();\r\n\r\n    useEffect(() => {\r\n        infected.getInfected().then((response) => {\r\n            setInfectedPeople(response);\r\n        })\r\n    }, []);\r\n\r\n    console.log(infectedPeople)\r\n\r\n    const totalInfected = infectedPeople && infectedPeople.length;\r\n\r\n    const getDate = (miliseconds) => {\r\n        const completeDate = new Date(miliseconds * 1000);\r\n        const year = completeDate.getFullYear();\r\n        const month = completeDate.getMonth() + 1;\r\n        const day = completeDate.getDate();\r\n        const date = `${day} / ${month} / ${year}`;\r\n        return (date)\r\n    }\r\n\r\n    const newDate = new Date();\r\n    const year = newDate.getFullYear();\r\n    const month = newDate.getMonth() + 1;\r\n    const day = newDate.getDate();\r\n    const today = `${day} / ${month} / ${year}`;\r\n\r\n\r\n    // const loadTable = (list) => {\r\n    //     return (list && list.map((infected) => (\r\n    //         <tr key={infected.id} style={{ backgroundColor: `${infected.live ? \"white\" : \"rgba(255, 99, 132, 0.4)\"}` }}>\r\n    //             <td>{getDate(`${infected.infect_date}`)}</td>\r\n    //             <td>{infected.first_name}</td>\r\n    //             <td>{infected.last_name}</td>\r\n    //             <td>{infected.age}</td>\r\n    //             <td>{infected.country}</td>\r\n    //             <td>{infected.female ? \"Femenino\" : \"Masculino\"}</td>\r\n    //         </tr>\r\n    //     )))\r\n    // }\r\n\r\n    // const ordenar = () => {\r\n    //     infectedPeople.sort(function (a, b) {\r\n    //         return a.age - b.age;\r\n    //     });\r\n    //     console.log(infectedPeople)\r\n    //     const table = document.getElementById('dataTable');\r\n    //     const tbody = table.getElementsByTagName('tbody')[0];\r\n    //     tbody.innerHTML = '';\r\n    //     loadTable(infectedPeople);\r\n    // }\r\n\r\n    // console.log(infectedPeople)\r\n\r\n    const COLUMNS = [\r\n        {\r\n            Header: 'Fecha contagio',\r\n            accessor: 'infect_date'\r\n        },\r\n        {\r\n            Header: 'Nombre',\r\n            accessor: 'first_name',\r\n        },\r\n        {\r\n            Header: 'Apellido',\r\n            accessor: 'last_name',\r\n        },\r\n        {\r\n            Header: 'Edad',\r\n            accessor: 'age',\r\n        },\r\n        {\r\n            Header: 'Pais',\r\n            accessor: 'country',\r\n        },\r\n        {\r\n            Header: 'Genero',\r\n            accessor: 'female',\r\n        }]\r\n\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => infectedPeople, [infectedPeople])\r\n\r\n    const tableInstance = useTable({\r\n        columns,\r\n        data,\r\n    })\r\n\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3 style={{ backgroundColor: 'rgb(87, 234, 154)', textAlign: 'center', marginBottom: '5vh' }}>Cantidad de infectados al dia {today}: {totalInfected}</h3>\r\n            <div style={{ width: '80%', margin: 'auto' }}>\r\n                <table {...getTableProps()}>\r\n                    <thead>\r\n                        {headerGroups.map((headerGroup) => (\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                {\r\n                                    headerGroup.headers.map(column => (\r\n                                        <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                                    ))\r\n                                }\r\n                            </tr>\r\n                        ))}\r\n                    </thead>\r\n                    <tbody {...getTableBodyProps()}>\r\n                        {\r\n                            rows.map((row) => {\r\n                                prepareRow(row)\r\n                                return (\r\n                                    <tr {...row.getRowProps()}>\r\n                                        {\r\n                                            row.cells.map((cell) => {\r\n                                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                            })\r\n                                        }\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </tbody>\r\n                </table>\r\n                {/* <Table id=\"dataTable\" bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Fecha contagio</th>\r\n                            <th>Nombre</th>\r\n                            <th>Apellido</th>\r\n                            <th>Edad<Button style={{ padding: '0', marginLeft: '10px' }} variant=\"link\" onClick={() => ordenar()}>▼</Button></th>\r\n                            <th>Pais</th>\r\n                            <th>Genero</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {loadTable(infectedPeople)}\r\n                    </tbody>\r\n                </Table> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { InfoTable }"]},"metadata":{},"sourceType":"module"}