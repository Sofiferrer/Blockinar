{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sofi\\\\Desktop\\\\Blockinar\\\\blockinar\\\\src\\\\screens\\\\Home\\\\components\\\\Infected\\\\components\\\\Chart.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = ({\n  data\n}) => {\n  const dates = [];\n\n  const getDates = miliseconds => {\n    const completeDate = new Date(miliseconds * 1000);\n    const year = completeDate.getFullYear();\n    const month = completeDate.getMonth() + 1;\n    const day = completeDate.getDate();\n    const date = `${day} / ${month} / ${year}`;\n\n    if (!dates.includes(date)) {\n      dates.push(date);\n    }\n\n    return dates;\n  };\n\n  const stringifyDate = miliseconds => {\n    const completeDate = new Date(miliseconds * 1000);\n    const year = completeDate.getFullYear();\n    const month = completeDate.getMonth() + 1;\n    const day = completeDate.getDate();\n    const date = `${day} / ${month} / ${year}`;\n    return date;\n  };\n\n  data && data.map(infected => getDates(infected.infect_date));\n\n  const porFecha = () => {\n    const infectedPerDate = date => data.filter(d => stringifyDate(d.infect_date) === date).length;\n\n    return dates.map(date => infectedPerDate(date));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '10vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '50vh',\n        width: '80%',\n        margin: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: dates,\n          datasets: [{\n            label: 'Progresion contagios',\n            data: porFecha(),\n            backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)'],\n            borderWidth: 1\n          }]\n        },\n        height: 50,\n        width: 100,\n        options: {\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Chart;\nexport { Chart };\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["C:/Users/Sofi/Desktop/Blockinar/blockinar/src/screens/Home/components/Infected/components/Chart.js"],"names":["React","Line","Chart","data","dates","getDates","miliseconds","completeDate","Date","year","getFullYear","month","getMonth","day","getDate","date","includes","push","stringifyDate","map","infected","infect_date","porFecha","infectedPerDate","filter","d","length","marginTop","height","width","margin","labels","datasets","label","backgroundColor","borderColor","borderWidth","maintainAspectRatio","scales","yAxes","ticks","beginAtZero"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\"\r\n\r\nconst Chart = ({ data }) => {\r\n\r\n    const dates = [];\r\n    const getDates = (miliseconds) => {\r\n        const completeDate = new Date(miliseconds * 1000);\r\n        const year = completeDate.getFullYear();\r\n        const month = completeDate.getMonth() + 1;\r\n        const day = completeDate.getDate();\r\n        const date = `${day} / ${month} / ${year}`;\r\n        if (!dates.includes(date)) {\r\n            dates.push(date)\r\n        }\r\n        return (dates)\r\n    }\r\n\r\n    const stringifyDate = (miliseconds) => {\r\n        const completeDate = new Date(miliseconds * 1000);\r\n        const year = completeDate.getFullYear();\r\n        const month = completeDate.getMonth() + 1;\r\n        const day = completeDate.getDate();\r\n        const date = `${day} / ${month} / ${year}`;\r\n        return (date)\r\n    }\r\n\r\n    data && data.map((infected) => getDates(infected.infect_date))\r\n\r\n    const porFecha = () => {\r\n        const infectedPerDate = (date) => data.filter((d) => stringifyDate(d.infect_date) === date).length\r\n        return dates.map((date) => infectedPerDate(date))\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ marginTop: '10vh' }}>\r\n            <div style={{ height: '50vh', width: '80%', margin: 'auto' }}>\r\n                <Line\r\n                    data={{\r\n                        labels: dates,\r\n                        datasets: [\r\n                            {\r\n                                label: 'Progresion contagios',\r\n                                data: porFecha(),\r\n                                backgroundColor: [\r\n                                    'rgba(255, 99, 132, 0.2)',\r\n                                ],\r\n                                borderColor: [\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                ],\r\n                                borderWidth: 1\r\n                            },\r\n                        ]\r\n                    }}\r\n                    height={50}\r\n                    width={100}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        scales: {\r\n                            yAxes: [\r\n                                {\r\n                                    ticks: {\r\n                                        beginAtZero: true,\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport { Chart }"]},"metadata":{},"sourceType":"module"}